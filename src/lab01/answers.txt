Name: Kartikeya Sharma
Class: csci205
Section: 12 PM
Lab: lab01

Questions: 2.5

Answers:

Exercise 1:

1.1: /home/accounts/student/k/ks061
1.2: The -a option "[ignores] entries starting with ."
1.3: The -l option "[uses] a long listing format."
1.4: The -c option. It sorts with the most recent file listed first. Confirmed with the -clt option.
1.5: The -cr option.
1.6: The -S option. Confirmed with the -Ss option.
1.7: 

csci205:
total 4
drwx--x--x 3 ks061 student 4096 Aug 20 12:28 src

csci205/src:
total 4
drwx--x--x 2 ks061 student 4096 Aug 20 12:52 lab01

csci205/src/lab01:
total 4
-rw------- 1 ks061 student 396 Aug 20 12:52 answers.txt

Exercise 2: 

2.1: A version control system is a system that aids in cataloging changes to either a single file or multiple files in a way that specific versions of that file or those 
     files can be recalled in the future when needed.
2.2: 1) Local Version Control System (LVCS) 2) Centralized Version Control System (CVCS) 3) Distributed Version Control System (DVCS). A Local Version Control System would be 
     useful when one programmer is developing a browser script to increase the efficiency of his personal workflow. A Centralized Version Control System would be useful when 
     developing an open-source operating system, such as Linux, as administrators can control who can perform which actions; server downtown may not be as much of a problem
     for such large projects that are well-enough funded and run at reliable data centers. A Distributed Version Control System would be useful when a team of technology
     consultants are constantly traveling with on-and-off Internet connection yet need to work on a software project together.
2.3: Git is a Distributed Version Control System.
2.4: The fact that most operations in Git are performed locally means that Git only needs the local machine, including local computing resources and local files, to function.
     For one, this means that most operations will circumvent speed inefficiencies due to network latency, making Git run faster than a typical Centralized Version Control
     System on most operations. Secondly, if you have no Internet connection (due to service loss, travel, etc.), Git is operational offline; one can commit their code changes
     locally until available Internet access allows for uploading those changes.
2.5: Each data object is referred to with a SHA-1 hash/checksum, which is a string of hexadecimal characters calculated based on either directory structure or what is contained
     within files; this hash holds the integrity of each change because if even one character in a file/directory structure is changed, git will recognize those as non-committed 
     changes until formally committed by the end user with a new hash. Also, almost all Git actions add data to the Git database, making it difficult to lose previous versions.
2.6: There are three states: modified, staged, and committed. The modified state is when files are being crafted in a sandbox, where changes can be made without publishing said
     changes. The staged state is when a particular version of a file (the current version of the file at the time the file is staged) is marked to be included in the next
     publishing of the Git project directory. The committed state is when files are published; this version is added to Git's database.

Exercise 3:

3.1: Bytecode are instructions that can be efficiently processed by the computer processor. They are generated by the Java compiler (using the javac command on a file) by converting
     the set of instructions within the Java source code into a form that can be efficiently processed by the computer processor in a .class file.
3.2: Java code written and tested on one operating system will work on machines with other operating systems, as many different operating systems come with a Java virtual machine.
3.3: Code running optimized for the JVM can be slower than that running on native hardware because the JVM often has to recompile to native code that is efficiently processed by
     the processor that is a part of the native hardware.
3.4: No; I did find something that I disagreed with. I do realize that writing in Java typically takes less code than writing in a language like C++. However, Java is not really 
     best-known for writing less code (perhaps Python could more fittingly claim that characteristic).
3.5: 1) Single line comments (// Comment) 2) Multiline comments (/* Comment */) 3) Documentation comments (/** Comment */)
3.6: 1) Make sure you are in the directory of the program by using cd to navigate to the directory of the program. 2) Make sure the class name within the Java file and the filename
     both have the same name (in this case, filename: MyProgram.java; class name: MyProgram). 3) Type in "javac MyProgram.java" without the double quotes and press Enter. 
     4) Type in "java MyProgram" without the double quotes and press Enter.

Exercise 4:

4.1: "Prints a String and then terminate the line. This method behaves as though it invokes print(String) and then println()." (Source: https://docs.oracle.com/javase/8/docs/api/)
4.2: The "standard" input stream is "in." Its type is InputStream.

Exercise 5: 

5.1: Because the type of the result is the 'larger' of the types of each of the operands and both types of both of the operands are int, the result will also be an int, i.e. the 
     Whole number part of the mathematical result of performing the division operation.
5.2: 

1.0

Because the type of the result is the 'larger' of the types of each of the operands and both types of both of the operands are int, the result of evaluating the express will also 
be an int, i.e. the whole number part of the mathematical result of performing the division operation. However, the value that gets assigned to the variable is a double, i.e. a
decimal number not an integer, because the type of the answer variable is a double.

Exercise 6:

6.1: The args variable represents a list of String objects that contains the arguments passed into the command line when running the program with the "java" command in the
     command line.
6.2: The void keyword in a method declaration represents that the method does not return anything.
6.3: Identifiers are the names or series of characters used to represent a class, method, or variable.
6.4: Keywords are words that Java interprets with special meaning, such as characterizing a variable or designating a loop.
6.5: Float and double variables are floating types (both hold decimal numbers). The difference is in the number of significant digits float variables and double variables can hold.
     Float variables hold 4 bytes, whereas double variables hold 8 bytes; a double variable can hold about twice the number of significant digits as a float variable can.
6.6: Byte, short, int, and long variables all hold integral numbers. The difference is in the number of significant digits byte, short, int, and long variables can hold.
     Byte variables hold 1 byte, short variables hold 2 bytes, int variables hold 4 bytes, and long variables hold 8 bytes; long variables hold the most amount of significant digits
     of the aforementioned integral primitive types in Java, int variables hold the second most amount of significant digits of the aforementioned integral primitive types in Java, 
     short variables hold the third most amount of significant digits of the aforementioned integral primitive types in Java, and bytes hold the least amount of significant digits
     Of the aforementioned integral primitive types in Java.
6.7: A String is not a primitive type. It is a class; an instance of a String would be an object.
6.8: 

String name = "Kartikeya Sharma";

6.9: The "scope" of a variable refers to what section of the code, such as a class, the code is visible in, including accessible or modifiable in.