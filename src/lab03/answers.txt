/* *****************************************
* CSCI205 - Software Engineering and Design
* Fall 2018
* Instructor: Professor Dancy
* Section: 12 PM
*
* Name: Kartikeya Sharma
* Date: 08/29/2018
*
* Lab / Assignment: Lab 03
*
* Description: This document contains text responses for questions from Lab 03.
* 
* *****************************************/

#### Q1 ####
$ git log --oneline --decorate
9d8d735 (HEAD, master) more work
5defbce Init commit

#### Q2 ####
$ git log --decorate --oneline
9d8d735 (HEAD, myFeature, master) more work
5defbce Init commit

#### Q3 ####
$ git log --oneline --decorate
149305e (HEAD, myFeature) test2
07857a0 test1
9d8d735 (master) more work
5defbce Init commit

#### Q4 ####
$ git diff master
diff --git a/Main.java b/Main.java
index 16832d9..eb26866 100644
--- a/Main.java
+++ b/Main.java
@@ -2,5 +2,7 @@ public class Main {
     public static void main( String[] args ) {
         System.out.println( "Init commit" );
         System.out.println( "more work" );
+        System.out.println( "test1" );
+        System.out.println( "test2" );
     }
 }

#### Q5 ####
$ git log --oneline --decorate --all
149305e (myFeature) test2
07857a0 test1
9d8d735 (HEAD, master) more work
5defbce Init commit

#### Q6 ####
$ git log --oneline --decorate --all
149305e (HEAD, myFeature, master) test2
07857a0 test1
9d8d735 more work
5defbce Init commit

#### Exercise 4: Performance comparison ####
$ java lab03/Fibonacci
Request your fibonacci number:
20
Recursive fib: 6765 (Duration: 2.050663 ms)
Non-recursive fib: 6765 (Duration: 0.010394 ms)

$ java lab03/Fibonacci
Request your fibonacci number:
30
Recursive fib: 832040 (Duration: 13.58317 ms)
Non-recursive fib: 832040 (Duration: 0.012074 ms)

$ java lab03/Fibonacci
Request your fibonacci number:
40
Recursive fib: 102334155 (Duration: 1014.484577 ms)
Non-recursive fib: 102334155 (Duration: 0.030411 ms)

Despite inputting large numbers, the program would not crash on my 
local system nor on the remote Bucknell Linux server.
The program would simply stall for hours (particularly when inputting
any number 48 or higher). A number of other people in the class have 
also reported having this issue.

Recursion is computationally more expensive because (particularly at larger 
values of n) the recursive calls have a substantial amount of repeated
calculations of 'lower n' Fibonacci numbers, which, in turn, have their
own set of repeated calculations of 'lower n.' This 'tree' of repeated
calculations can demonstrate how the complexity of the recursive algorithm
has a complexity of O(2^n). On the other hand, the iterative algorithm has
a more efficient complexity of O(n) because all of the variable 
assignments and/or summation is O(1), which takes place n times (from
count = 0 to count = n).

#### Exercise 5 ####
(1.1) 8
      (an int)
(1.2) 13
      (an int)
(1.3) HelloCSCI 205
      (a String object containing the value above)
(1.4) llo
      (a String object containing the value above)
(1.5) true
      (a boolean)
(1.6) 2
      (a char)
(1.7) 7
      (an int)
(1.8) HELLO
      (a String object containing the value above)
(1.9) CSCI200
      (a String object containing the value above)
(1.10) a) is more efficient because the String variable is directly initialized
      with a reference to the "MyString" String literal. In option b), the
      Java Virtual Machine has to first create a String object with the
      "MyString" String literal; then, the String constructor takes in this
      String object to construct a second String object. After, the variable s 
      is initialized with a reference to the latter constructed String object.
 
